#!/bin/bash

# FaultLine: Bash Controller for Python FaultLine Integration
# Automates launching FaultLine.py and processing its output.

# ===== COLORS =====
RED="\033[0;31m"
GREEN="\033[0;32m"
CYAN="\033[0;36m"
YELLOW="\033[1;33m"
NC="\033[0m"

# ===== DEFAULT VARIABLES =====
OUTPUT_DIR=""
SAVE_RESULTS=false
MODE=""
TARGET=""

# ===== BANNER =====
banner() {
    echo -e "${CYAN}"
    echo "███████╗ █████╗ ██╗   ██╗██╗  ██╗████████╗██╗     ██╗███╗   ██╗███████╗"
    echo "██╔════╝██╔══██╗██║   ██║██║ ██╔╝╚══██╔══╝██║     ██║████╗  ██║██╔════╝"
    echo "█████╗  ███████║██║   ██║█████╔╝    ██║   ██║     ██║██╔██╗ ██║█████╗  "
    echo "██╔══╝  ██╔══██║██║   ██║██╔═██╗    ██║   ██║     ██║██║╚██╗██║██╔══╝  "
    echo "██║     ██║  ██║╚██████╔╝██║  ██╗   ██║   ███████╗██║██║ ╚████║███████╗"
    echo "╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝╚═╝  ╚═══╝╚══════╝"
    echo -e "${NC}FaultLine Bash Controller\n"
}

# ===== USAGE =====
usage() {
    echo -e "${GREEN}Usage:${NC} $0 -t <target> -m <mode> [-s <output_dir>]"
    echo "Options:"
    echo -e "  -t, --target <domain>  Specify the target domain"
    echo -e "  -m, --mode <recon|exploit|all>  Choose mode"
    echo -e "  -s, --save <directory>  Specify output directory (Optional)"
    echo -e "  -h, --help  Show this help menu"
    exit 1
}

# ===== RUN FAULTLINE.PY =====
run_python_module() {
    local target="$1"
    local mode="$2"

    echo -e "${CYAN}[+] Running FaultLine.py on $target in $mode mode...${NC}"
    python3 FaultLine.py -t "$target" -m "$mode"

    JSON_FILE="faultline_exports/${target}_results.json"
    if [[ -f "$JSON_FILE" ]]; then
        echo -e "${GREEN}[+] Parsing JSON Results...${NC}"
        parse_json "$JSON_FILE"
    else
        echo -e "${RED}[!] No results found.${NC}"
    fi
}

# ===== PARSE JSON RESULTS =====
parse_json() {
    local json_file="$1"

    echo -e "${CYAN}-------------------------------------------"
    echo -e "📄 FaultLine Results from: ${json_file}"
    echo -e "-------------------------------------------${NC}"

    # Extract and print key information
    echo -e "${YELLOW}WAF Detected:${NC} $(jq -r '.waf' "$json_file")"
    echo -e "${YELLOW}Endpoints Found:${NC}"
    jq -r '.endpoints[]' "$json_file" | sed 's/^/    • /'

    echo -e "${YELLOW}IDOR Vulnerabilities:${NC}"
    jq -r '.idor[]' "$json_file" | sed 's/^/    • /'

    echo -e "${YELLOW}Possible CNAME Takeover:${NC}"
    jq -r '.cname[]' "$json_file" | sed 's/^/    • /'

    echo -e "${YELLOW}LFI Vulnerabilities:${NC}"
    jq -r '.lfi[]' "$json_file" | sed 's/^/    • /'

    echo -e "${CYAN}-------------------------------------------${NC}"
}

# ===== ARGUMENT PARSING =====
while [[ $# -gt 0 ]]; do
    case "$1" in
        -t|--target)
            TARGET="$2"
            shift
            ;;
        -m|--mode)
            MODE="$2"
            shift
            ;;
        -s|--save)
            SAVE_RESULTS=true
            OUTPUT_DIR="$2"
            shift
            ;;
        -h|--help)
            usage
            ;;
        *)
            echo -e "${RED}[!] Unknown option: $1${NC}"
            usage
            ;;
    esac
    shift
done

# ===== VALIDATION =====
if [[ -z "$TARGET" || -z "$MODE" ]]; then
    echo -e "${RED}[!] Missing required arguments.${NC}"
    usage
fi

# ===== RUN SCRIPT =====
banner
run_python_module "$TARGET" "$MODE"

# ===== SAVE RESULTS IF ENABLED =====
if [[ "$SAVE_RESULTS" == true ]]; then
    mkdir -p "$OUTPUT_DIR"
    cp "faultline_exports/${TARGET}_results.json" "$OUTPUT_DIR/"
    cp "faultline_exports/${TARGET}_report.md" "$OUTPUT_DIR/"
    echo -e "${GREEN}[+] Results saved to $OUTPUT_DIR/${NC}"
fi

echo -e "${GREEN}[+] FaultLine Completed.${NC}"
